"""
PDF to Markdown conversion using marker-pdf
"""

import os
import subprocess
import tempfile
from pathlib import Path
from typing import Optional
from .markdown_cache import MarkdownCache


def convert_pdf_to_markdown(
    pdf_path: str,
    use_cache: bool = True,
    cache_dir: Optional[str] = None,
    cache_root: Optional[str] = None,
    verbose: bool = False,
    timeout: int = 600,
) -> str:
    """
    Convert PDF to Markdown using marker-pdf with caching.

    Args:
        pdf_path: Path to PDF file
        use_cache: Whether to use markdown caching (default: True)
        cache_dir: Custom cache directory (optional)
        verbose: Enable verbose output (default: False)

    Returns:
        Markdown content as string

    Raises:
        subprocess.CalledProcessError: If marker-pdf conversion fails
        FileNotFoundError: If marker-pdf is not installed
    """
    cache = _setup_markdown_cache(use_cache, cache_dir, cache_root)

    # Try to get from cache first
    if cache:
        cached_content = cache.get(pdf_path)
        if cached_content:
            _log_cache_hit(cache, pdf_path)
            return cached_content
        _log_cache_miss(pdf_path)

    try:
        content = _run_marker_conversion(pdf_path, timeout, cache_root)

        # Cache the result if caching is enabled
        if cache:
            _cache_markdown_content(cache, pdf_path, content)

        return content

    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"marker-pdf conversion failed: {e.stderr}") from e
    except FileNotFoundError as e:
        if "marker_single" in str(e):
            raise FileNotFoundError(
                "marker-pdf not found. Please install with: "
                "pip install git+https://github.com/datalab-to/marker.git"
            )
        raise


def _setup_markdown_cache(
    use_cache: bool, cache_dir: Optional[str], cache_root: Optional[str] = None
) -> Optional[MarkdownCache]:
    """Setup markdown cache if enabled."""
    if not use_cache:
        return None
    import os
    cache_root = os.getenv("CACHE_ROOT")
    return MarkdownCache(cache_dir, max_age_hours=168, cache_root=cache_root)  # 1 week


def _log_cache_hit(cache: MarkdownCache, pdf_path: str) -> None:
    """Log cache hit information."""
    import sys

    cache_key = cache._get_cache_key(pdf_path)
    cache_file_path = cache._get_cache_paths(cache_key)[0]
    print(f"Markdown Cache HIT: {cache_file_path}", file=sys.stderr)


def _log_cache_miss(pdf_path: str) -> None:
    """Log cache miss information."""
    import sys

    print(f"Markdown Cache MISS: Converting {pdf_path}...", file=sys.stderr)


def _run_marker_conversion(pdf_path: str, timeout: int, cache_root: Optional[str] = None) -> str:
    """Run marker-pdf conversion and return content."""
    # Use cache_root for temporary directory
    cache_root = cache_root or os.getenv("CACHE_ROOT", "/tmp")
    if cache_root is None:
        cache_root = "/tmp"
    marker_temp_dir = Path(cache_root) / "marker"
    marker_temp_dir.mkdir(parents=True, exist_ok=True)
    
    # Set marker font directory to writable location
    font_dir = Path(cache_root) / "marker_fonts"
    font_dir.mkdir(parents=True, exist_ok=True)
    
    with tempfile.TemporaryDirectory(dir=str(marker_temp_dir)) as temp_dir:
        output_dir = Path(temp_dir)

        # Run marker-pdf conversion with font directory
        env = os.environ.copy()
        env['MARKER_FONT_DIR'] = str(font_dir)
        
        cmd = [
            "marker_single",
            pdf_path,
            "--output_dir",
            str(output_dir),
            "--output_format",
            "markdown",
        ]

        subprocess.run(cmd, capture_output=True, text=True, check=True, timeout=timeout, env=env)

        # Find and read the generated markdown file
        markdown_file = _find_markdown_file(output_dir, pdf_path)

        with open(markdown_file, "r", encoding="utf-8") as f:
            return f.read()


def _find_markdown_file(output_dir: Path, pdf_path: str) -> Path:
    """Find the generated markdown file in marker output."""
    pdf_name = Path(pdf_path).stem
    pdf_output_dir = output_dir / pdf_name

    # First try: look in subdirectory with PDF name
    if pdf_output_dir.exists():
        md_files = list(pdf_output_dir.glob("*.md"))
        if md_files:
            return md_files[0]
        else:
            raise FileNotFoundError(
                f"No markdown files found in marker output directory: {pdf_output_dir}"
            )

    # Fallback: look in main output directory
    md_files = list(output_dir.glob("*.md"))
    if md_files:
        return md_files[0]
    else:
        all_files = list(output_dir.glob("*"))
        raise FileNotFoundError(
            f"No markdown file generated by marker-pdf. "
            f"Files found: {[f.name for f in all_files]}"
        )


def _cache_markdown_content(cache: MarkdownCache, pdf_path: str, content: str) -> None:
    """Cache the markdown content."""
    import sys

    cache_key = cache.put(pdf_path, content)
    cache_file_path = cache._get_cache_paths(cache_key)[0]
    print(f"Markdown cached to: {cache_file_path}", file=sys.stderr)
