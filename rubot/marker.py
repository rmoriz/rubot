"""
PDF to Markdown conversion using marker-pdf
"""

import subprocess
import tempfile
import os
from pathlib import Path
from typing import Optional
from .markdown_cache import MarkdownCache


def convert_pdf_to_markdown(pdf_path: str, use_cache: bool = True, cache_dir: Optional[str] = None, verbose: bool = False) -> str:
    """
    Convert PDF to Markdown using marker-pdf with caching.

    Args:
        pdf_path: Path to PDF file
        use_cache: Whether to use markdown caching (default: True)
        cache_dir: Custom cache directory (optional)
        verbose: Enable verbose output (default: False)

    Returns:
        Markdown content as string

    Raises:
        subprocess.CalledProcessError: If marker-pdf conversion fails
        FileNotFoundError: If marker-pdf is not installed
    """
    # Setup cache if enabled
    cache = None
    if use_cache:
        cache = MarkdownCache(cache_dir, max_age_hours=168)  # 1 week
        
        # Try to get from cache first
        cached_content = cache.get(pdf_path)
        if cached_content:
            import sys
            cache_key = cache._get_cache_key(pdf_path)
            cache_file_path = cache._get_cache_paths(cache_key)[0]
            print(f"Markdown Cache HIT: {cache_file_path}", file=sys.stderr)
            return cached_content
        
        import sys
        print(f"Markdown Cache MISS: Converting {pdf_path}...", file=sys.stderr)
    
    try:
        # Create temporary directory for output
        with tempfile.TemporaryDirectory() as temp_dir:
            output_dir = Path(temp_dir)
            
            # Run marker-pdf conversion
            cmd = [
                "marker_single",
                pdf_path,
                "--output_dir", str(output_dir),
                "--output_format", "markdown"
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                check=True,
                timeout=300  # 5 minutes timeout
            )
            
            # Find the generated markdown file
            # marker_single creates a subdirectory with the PDF name
            pdf_name = Path(pdf_path).stem
            pdf_output_dir = output_dir / pdf_name
            
            if pdf_output_dir.exists():
                # Look for markdown files in the subdirectory
                md_files = list(pdf_output_dir.glob("*.md"))
                if md_files:
                    markdown_file = md_files[0]
                else:
                    raise FileNotFoundError(f"No markdown files found in marker output directory: {pdf_output_dir}")
            else:
                # Fallback: look in main output directory
                md_files = list(output_dir.glob("*.md"))
                if md_files:
                    markdown_file = md_files[0]
                else:
                    all_files = list(output_dir.glob("*"))
                    raise FileNotFoundError(f"No markdown file generated by marker-pdf. Files found: {[f.name for f in all_files]}")
            
            # Read markdown content
            with open(markdown_file, "r", encoding="utf-8") as f:
                content = f.read()
            
            # Cache the result if caching is enabled
            if cache:
                cache_key = cache.put(pdf_path, content)
                cache_file_path = cache._get_cache_paths(cache_key)[0]
                import sys
                print(f"Markdown cached to: {cache_file_path}", file=sys.stderr)
            
            return content
                
    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"marker-pdf conversion failed: {e.stderr}") from e
    except FileNotFoundError as e:
        if "marker_single" in str(e):
            raise FileNotFoundError(
                "marker-pdf not found. Please install with: pip install git+https://github.com/datalab-to/marker.git"
            )
        raise