name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      
      # Install system dependencies for Docling
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr tesseract-ocr-deu libgl1
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e ".[dev,ocr-tesseract]"
      
      - name: Run tests
        run: |
          pytest tests/ --cov=rubot --cov-report=xml -m "not integration_real_api"
        env:
          PYTHONWARNINGS: "ignore::UserWarning"
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  docker:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      actions: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push multi-arch Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          timeout-minutes: 30

      - name: Clean up old untagged images
        if: success()
        run: |
          # Get the package name (repository name in lowercase)
          PACKAGE_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          
          echo "üßπ Cleaning up old untagged images for package: $PACKAGE_NAME"
          echo "üì¶ Repository: $REPO_NAME, Owner: ${{ github.repository_owner }}"
          
          # Try organization endpoint first, then user endpoint as fallback
          echo "üîç Fetching package versions..."
          API_RESPONSE=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/$REPO_NAME/versions" 2>/dev/null)
          
          # If org endpoint fails, try user endpoint
          if [ -z "$API_RESPONSE" ] || echo "$API_RESPONSE" | grep -q "Not Found"; then
            echo "üîÑ Trying user endpoint..."
            API_RESPONSE=$(curl -s \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/user/packages/container/$REPO_NAME/versions")
          fi
          
          echo "üìã API Response type: $(echo "$API_RESPONSE" | jq -r 'type' 2>/dev/null || echo "invalid JSON")"
          
          # Get untagged versions with better error handling
          if echo "$API_RESPONSE" | jq -e 'type == "array"' >/dev/null 2>&1; then
            VERSIONS=$(echo "$API_RESPONSE" | jq -r '
              .[] | 
              select(
                has("metadata") and 
                .metadata | has("container") and 
                .metadata.container | has("tags") and 
                (.metadata.container.tags | length == 0)
              ) | 
              .id' 2>/dev/null)
          else
            echo "‚ùå Invalid API response format"
            VERSIONS=""
          fi
          
          # Delete untagged versions (keep last 5 for safety)
          if [ -n "$VERSIONS" ]; then
            echo "Found untagged versions to clean up:"
            echo "$VERSIONS" | tail -n +6 | while read -r VERSION_ID; do
              if [ -n "$VERSION_ID" ]; then
                echo "üóëÔ∏è  Deleting untagged version: $VERSION_ID"
                # Try org endpoint first, then user endpoint
                RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null -X DELETE \
                  -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/$REPO_NAME/versions/$VERSION_ID" 2>/dev/null)
                
                if [ "$RESPONSE" != "204" ]; then
                  echo "üîÑ Trying user endpoint for deletion..."
                  RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null -X DELETE \
                    -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Accept: application/vnd.github.v3+json" \
                    "https://api.github.com/user/packages/container/$REPO_NAME/versions/$VERSION_ID")
                fi
                
                if [ "$RESPONSE" = "204" ]; then
                  echo "‚úÖ Successfully deleted version $VERSION_ID"
                else
                  echo "‚ùå Failed to delete version $VERSION_ID (HTTP $RESPONSE)"
                fi
                sleep 1
              fi
            done
            echo "‚úÖ Cleanup completed"
          else
            echo "‚ÑπÔ∏è  No untagged versions found to clean up"
          fi